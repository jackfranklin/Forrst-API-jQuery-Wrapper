h1. The Forrst API jQuery Wrapper

p. This is the first jQuery wrapper for the Forrst API. The Forrst API is currently very new and as such not much functionality is in place. Currently this wrapper will allow you to get a user's posts however as more is added to the API the plugin will replicate it.

p. For instructions on how to use it, read on!

p. I owe many thanks to these people on Twitter (and I guess I owe them a beer as well)
*@KyleBragger* for putting up with my email questions (and creating the API). And this guy created Forrst. NICE ONE!
*@46bit* for helping me get lots of it working and solving issues with me on Skype.
*@mheap* for putting up with endless Javascript questions on Skype.


Any problems you can grab me on:
*Twitter: @Jack_Franklin
*Forrst: jackfranklin
*Skype: jack_franklin

h2. PLEASE PLEASE PLEASE use the minified version for live sites.

p. If you want to fork this please do and make your edits. Also, let me hear about it! I'd love to see what you're all up to ! _Skype is the best way - jack_franklin_



*-------------
REMEMBER TO INCLUDE jQUERY FIRST!
--------------*


h3. Currently two methods are available to you:



h4. $.forrstPosts():

h5. Options:

notextile. <pre><code>
//The values of each variable are the defaults
		username: 'kyle', //your forrst username [REQUIRED]
		count: 5, //number of posts you want to retrieve, cannot be more than 10 [REQUIRED]
		since: null, //see below for an explanation 
		lastid: null, //see below for an explanation
		debugMode: false, //if you are having issues turn this to true, it outputs an array of errors.
		callback: function() {}, //a function to run once the data is retrieved [REQUIRED]
		apiVersion: 'v1', //version of the API - used incase Forrst suddenly change their version.
		cantFetchPosts: 'Sorry, there has been a problem fetching information from Forrst.'
						//the error message shown if there was an issue with Forrst.
		fetchedError: 'We managed to interact with Forrst but all of your posts are set to private, so we cannot display them here.'
						//error shown if Forrst was contacted but no data was returned. 
						//Usually this is due to posts being set as private.

notextile. </code></pre>

h5. Example:

notextile. <pre><code>
	$.forrstPosts({
			'username':'kyle',
			'count':5,
			callback:function(data, success) {
				if(success)
				{
					$.each(data, function(index, val) {
					  //here 'val' refers to each post
					 //this is where you can access the object and do with what you please
					});
				}
			}
		})

notextile. </code></pre>

h5. The Callback:

notextile. <pre><code>
	function(data, success)
		var data //if successful, this contains an array of objects, one per post. The number is whatever you set 'count' as.
			//If data could not be fetched, this contains the error message explaining what went wrong. 
			//If debugMode is set to TRUE, this contains an array detailing the issues.
		var success //this is a boolean. If posts have been successfully retrieved, it is set to TRUE. If they could not be fetched, this is FALSE.

notextile. </code></pre>


h5. The posts object:

_I suspect this will be documented when the Forrst API is more polished, but for now here's my attempt at explaining it._

notextile. <pre><code>

comment_count [INT] //number of comments the item has received
		content [STR] //content of the post
		created_at [TIME] //date the post was crated
		current_user_likes_this [BOO] // not in use right now
		description [STR] //description of the post
		faved_by_current_user [BOO] // not in use right now
		formated_content [STR] //the content of the post formatted (carriage returns, etc)
		id [INT] // id of the post
		images [OBJ] // Object containing the following items (images used in post)
			images.large [STR] // URL to large version of the image
			images.medium [STR] // URL to medium version of the image
			images.mega [STR] // URL to super-large version of the image
			images.original [STR] // URL to original version of the image
			images.small [STR] // URL to small version of the image
			images.thumb [STR] // URL to thumbnail version of the image
		in_reply_to_post_id [INT] // id of the post that this post was posted in reply to
		is_public [INT] // 1 = true, 0 = false. Is the post publicly viewable?
		like_count [INT] //how many likes the post has
		markdown_content [STR] // markdown version of the content
		markdown_description [STR] //markdown version of the description
		original_post_id [INT] //id of the original post
		page_title [STR] //title of the page
		phrase [STR] // phrase used for the post (eg "a snap")
		post_type [STR] // type of post (eg "snap")
		post_url [STR] //URL to post (excluding domain)
		reply_key [STR] //Used in reply_url - unique token to authorise a reply.
		reply_url [STR] //URL to reply to the post (excluding domain)
		short_url_redirects // How many times the post has been accessed via its short URL
		slug [STR] // slug version of the post title
		snap_content_type [STR] //type of the snap (eg "image/png")
		snap_file_name [STR] //file name 
		snap_file_size [INT] //file size
		tag_objs [OBJ] //Object containing all the tags, which each have their own object:
			//Each object within tab_objs is named as an integer from 0 (eg 0,1,2)
			id [INT] //id of the tag
			name [STR] //name of the tag 
			posts_url [STR] // URL to the tag (excluding domain) eg /tags/posts?t=yourtag
		tag_string [STR] // string representing the tag 
		tags [OBJ] // each tag coupled with its ID like so
			tagid : tagname (eg: 8459 : "streakly")
		tiny_id [STR] //tiny id of the post, used for short urls
		title [STR] //title of the post
		updated_at [TIME] // time post was last updated
		url [STR] //the post URL (for "link" post types)
		url_with_wbr [STR] //post URL with &lt;wbr /&gt; inserted to prevent wrapping on long URLs
		user_id [INT] //id of user who posted it
		views [INT] //number of views the post has recieved

notextile.</code></pre>



h4. $.forrstUserInfo()

*Function: You pass this function either a username or an id, and it will find the ID or Username from what you pass.*

h5. Options:

notextile. <pre><code>

username: 'kyle', //forrst username (use if you want to find an ID)
userId: null, //forrst id (use if you want to find a username)
apiVersion: 'v1', //forrst api version
debugMode: false, //debug mode helps you out if you're stuck
cantFetchInfo: 'We had an issue getting in touch with Forrst',
		//error if you cant fetch the data
invalidData: 'The data you passed in was incorrect',
		//error if the data you passed is wrong
callback: function() {} //function to handle the data

notextile. </code></pre>

*Please note - if you pass in both the username and the ID, it will not work. Doing that will break the internet, just like when you google 'google'. Don't even risk it.*


h5. Examples:

h6. Fetching a username from ID:

notextile. <pre><code>

	$.forrstUserInfo({
		'username':null,
		'userId':8620,
		callback: function(data, success) {
			if(success)
			{
				console.log(data);
				//data is the username
			}
		}
	})

notextile. </code></pre>

h6. Fetching a user id:

notextile. <pre><code>

	$.forrstUserInfo({
		'username':'jackfranklin',
		'userId':null,
		callback: function(data, success) {
			if(success)
			{
				console.log(data);
				//data is the ID
			}
		}
	})

notextile. </code></pre>